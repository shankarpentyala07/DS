https://leetcode.com/problems/letter-combinations-of-a-phone-number/
Solution1: Backtracking Approach
class Solution {
    Map<String,String> hm = new HashMap<>(){{
        put("2","abc");
        put("3","def");
        put("4","ghi");
        put("5","jkl");
        put("6","mno");
        put("7","pqrs");
        put("8","tuv");
        put("9","wxyz");
    }};
    
    List<String> res = new ArrayList<>();
    
    public void backtrack(String combination,String digits)
    {
        if(digits.length() == 0)
            res.add(combination);
        else
        {
            String digit = digits.substring(0,1);
            String map = hm.get(digit);
            for(int i=0;i<map.length();i++)
            {
                String letter = map.substring(i,i+1);
                backtrack(combination+letter,digits.substring(1));
            }
        }
    }
    public List<String> letterCombinations(String digits) {
        
        if(digits == null || digits.length() == 0)
            return res;
        backtrack("",digits);
        return res;
        
    }
}

Time complexity : o(3^N * 4^M) - where N is the number of digits in the input that maps to 
3 letters (e.g. 2, 3, 4, 5, 6, 8) and M is the number of digits in the input that maps to 4 letters (e.g. 7, 9), and N+M is the total number digits in the input.
Space complexity: o(3^N * 4^M)   since one has to keep 3^N * 4^M solutions.


Solution2:

Runtime: 1 ms, faster than 100.00% of Java online submissions.

class Solution {
public List letterCombinations(String digits) {

    List<String> ans = new ArrayList<String>();
    if(digits==null||digits.length()==0) return ans;
    char[][] map = new char[8][];
    map[0]="abc".toCharArray();
    map[1]="def".toCharArray();
    map[2]="ghi".toCharArray();
    map[3]="jkl".toCharArray();
    map[4]="mno".toCharArray();
    map[5]="pqrs".toCharArray();
    map[6]="tuv".toCharArray();
    map[7]="wxyz".toCharArray();
    
    char[] input = digits.toCharArray();
    ans.add("");
    for(char c:input)
        ans=expand(ans,map[c-'2']);
    return ans;
    
    
}

private List<String> expand(List<String> l,char[] arr)
{
    List<String> next = new ArrayList<String>();
    for(String s:l)
        for(char c:arr)
            next.add(s+c);
    return next;
}
}
