https://leetcode.com/explore/interview/card/microsoft/31/trees-and-graphs/164/

Iterative Solution:

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null)
            return result;
        Queue<TreeNode> queue = new LinkedList<>();
        List<Integer> curr = new ArrayList<>();
        queue.add(root);
        while(!queue.isEmpty())
        {
            int size = queue.size();
            curr= new ArrayList<>();
            while(size-- > 0)
            {
                TreeNode node = queue.remove();
                curr.add(node.val);
                if(node.left != null)
                    queue.add(node.left);
                if(node.right != null)
                    queue.add(node.right);
            }
            result.add(curr);
        }
        
        return result;
        
    }
}

Recursive Solution:
class Solution {
    public void levelOrder(TreeNode root,int level,List<List<Integer>> result)
    {
        if(root == null)
            return;
        if(result.size() == level)
            result.add(new ArrayList<>());
        result.get(level).add(root.val);
        levelOrder(root.left,level+1,result);
        levelOrder(root.right,level+1,result);
    }
    
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        levelOrder(root,0,result);
        return result;
        
    }  
}
