https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

Solution (If both are on left,go left.If both are on right,go right or else the current node is the answer)

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
             if(q.val < root.val && p.val < root.val)
                 return lowestCommonAncestor(root.left,p,q);
             else if (q.val > root.val && p.val > root.val)
                 return lowestCommonAncestor(root.right,p,q);
             else
                 return root;
        
    }
}

Solution2:
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        if((root.val - p.val) * (root.val - q.val) > 0 )
           return p.val < root.val ? lowestCommonAncestor(root.left,p,q) :lowestCommonAncestor(root.right,p,q);
            return root;
        
    }
}

Solution3 Iterative:
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        while((root.val - p.val) * (root.val - q.val) > 0)
            root = p.val < root.val ? root.left: root.right;
        return root;
  
    }
}


Solution4 Iterative:
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {

        while(root != null){
        if(p.val < root.val && q.val < root.val)
            root = root.left;
        else if(p.val > root.val && q.val > root.val)
            root = root.right;
        else
            return root;
        }
        return root;
  
    }
}
Time Complexity : O(N), where N is the number of nodes in the BST. In the worst case we might be visiting all the nodes of the BST.

Space Complexity : O(1).
