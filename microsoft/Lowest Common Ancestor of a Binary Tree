https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/
Solution1:
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        if(root == null)
            return root;
        
        if(root == p || root == q)
            return root;
        TreeNode left = lowestCommonAncestor(root.left,p,q);
        TreeNode right = lowestCommonAncestor(root.right,p,q);
        
        if(left != null && right != null)
            return root;
        
        return left == null ? right : left;
        
    }
}

Solution2:
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        Map<TreeNode,TreeNode> child2ParentMap = new HashMap<TreeNode,TreeNode>();
        child2ParentMap.put(root,null);
        int plen=0,qlen=0,level=0;
        while(!queue.isEmpty())
        {
            int size = queue.size();
            while(size-- > 0)
            {
               TreeNode curr = queue.remove();
                if(curr == p)
                    plen = level;
                
                if(curr == q)
                    qlen = level;
                
                if(curr.left != null)
                {
                    queue.add(curr.left);
                    child2ParentMap.put(curr.left,curr);
                }
                
                if(curr.right != null)
                {
                    queue.add(curr.right);
                    child2ParentMap.put(curr.right,curr);
                }
                
            }
            level++;
        }
        
        while (plen > qlen)
        {
            p = child2ParentMap.get(p);
            plen--;
        }
        
        while(qlen > plen)
        {
            q = child2ParentMap.get(q);
            qlen--;
        }
            
        while(p != q)
        {
            p = child2ParentMap.get(p);
            q = child2ParentMap.get(q);
            
        }
        
        return p;
        
    }
}


Time: O(N)
Space: O(N)
