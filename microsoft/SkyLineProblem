https://leetcode.com/explore/interview/card/microsoft/48/others/157/
class Solution {
    class Building
    {
        int val;
        int height;
        int start;
        Building(){}
        Building(int val,int height,int start)
        {
            this.val = val;
            this.height = height;
            this.start = start;
        }
    }
    
   
    public List<List<Integer>> getSkyline(int[][] buildings) {
        
        List<List<Integer>> res = new ArrayList<>();
        if(buildings == null || buildings.length == 0)
            return res;
        
        int nr = buildings.length;
        List<Building> list = new ArrayList<Building>();
        for(int i=0;i<nr;i++)
        {
            Building start = new Building(buildings[i][0],buildings[i][2],1);
            list.add(start);
            Building end = new Building(buildings[i][1],buildings[i][2],0);
            list.add(end);
        }
     //   Collections.sort(list,(a,b) -> (a.val != b.val ? a.val-b.val :(a.height != b.height ? b.height-a.height : b.start-a.start)));
        Collections.sort(list,(a,b) -> (a.val != b.val ? a.val-b.val : (a.start != b.start ? b.start - a.start : (a.start == 1 ? b.height - a.height : a.height-b.height))));
        
      
        for(Building l1 : list)
         System.out.println(l1.val + "," + l1.height + "," + l1.start);
        
        //Max Heap
      //  PriorityQueue<Integer> heights = new PriorityQueue<Integer>((a,b) -> (b-a));
        //TreeSet<Integer> heights = new TreeSet<Integer>((a,b) -> (b-a));
        TreeMap<Integer,Integer> heights = new TreeMap<Integer,Integer>();
        heights.put(0,1);
        int max = 0;
        for(Building l1 : list)
        {
            
            if(l1.start == 1)
                heights.put(l1.height,heights.getOrDefault(l1.height,0) + 1);
            else
            {
                if(heights.get(l1.height) == 1)
                    heights.remove(l1.height);
                else
                    heights.put(l1.height,heights.get(l1.height)-1);
            }
                        
            if(max != heights.lastKey())
                {
                 List<Integer> tmp = new ArrayList<Integer>();
                 tmp.add(l1.val);
                 tmp.add(heights.lastKey());
                 res.add(tmp);
                 max = heights.lastKey();
                }
        }
            
        return res;
    }
}

Time : O(nlogn)
Space:O(n) 
