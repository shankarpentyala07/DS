https://leetcode.com/problems/valid-palindrome/solution/

solrevised1:
class Solution {
    public boolean isPalindrome(String s) {
        
        if(s.isEmpty())
            return true;
        
        int left = 0,right = s.length()-1;
        char ch[] = s.toLowerCase().toCharArray();
        while(left < right)
        {
            if(!Character.isLetterOrDigit(ch[left]))
                left++;
            else if(!Character.isLetterOrDigit(ch[right]))
                right--;
            else
            {
                if(ch[left++] != ch[right--])
                    return false;
             
            }      
        }
        
        return true;
    }
}

sol1:
class Solution {
    public boolean isPalindrome(String s) {
         if (s.isEmpty()) {
        	return true;
        }
        StringBuilder sb = new StringBuilder();
        for(char ch:s.toCharArray())
            if(Character.isLetterOrDigit(ch))
                sb.append(Character.toLowerCase(ch));
        return sb.toString().equals(sb.reverse().toString());
                
        
    }
}


sol2:
class Solution {
    public boolean isPalindrome(String s) {
         if (s.isEmpty()) {
        	return true;
        }
        int l=0,r = s.length()-1;
        while(l<r)
        {
            while(l<r && !Character.isLetterOrDigit(s.charAt(l)))
                l++;
            while( l<r && !Character.isLetterOrDigit(s.charAt(r)))
                r--;
            if(l<r && Character.toLowerCase(s.charAt(l)) != Character.toLowerCase(s.charAt(r)))
                return false;
            l++;
            r--;
                
        }
         
        return true;
        
        
    }
}
