https://leetcode.com/problems/maximum-frequency-stack/
Solution:
class FreqStack {
    
    Map<Integer,Stack<Integer>> hm;
    Map<Integer,Integer> freq ;
     int maxfreq = 1;
    
    public FreqStack() {
       hm  = new HashMap<>();
       freq =new HashMap<>(); 
    }
    
    public void push(int x) {
        freq.put(x,freq.getOrDefault(x,0)+1);
        int currfreq = freq.get(x);
        if(!hm.containsKey(currfreq))
            hm.put(currfreq,new Stack<>());
         hm.get(currfreq).push(x);
        
        if(maxfreq < currfreq)
            maxfreq = currfreq;
        
    }
    
    public int pop() {
        int x = hm.get(maxfreq).pop();
          freq.put(x,freq.get(x)-1);
        
        if (hm.get(maxfreq).size() == 0)
        {
         //   hm.remove(maxfreq);
            maxfreq--;
        }
        
        return x;
    }
}

Time Complexity : 0(1) for both push/pop
Space Complexity : 0(n) n = no of elements in freq stack

Solution2: (priority Queue + HashMap) (Comparator in priority Queue is implemented as lambda exp)

class FreqStack {
    Map<Integer,Integer> count;
    PriorityQueue<Node> pq;
    int idx;
    public FreqStack() {
        count = new HashMap<>();
        pq = new PriorityQueue<>((n1,n2) -> (n1.freq == n2.freq?n2.idx-n1.idx:n2.freq-n1.freq));
        idx=0;
    }
    
    public void push(int x) {
        int freq = count.getOrDefault(x,0);
        count.put(x,freq+1);
        pq.add(new Node(x,freq+1,++idx));
    }
    
    public int pop() {
        
        int res = pq.remove().val;
         count.put(res,count.get(res)-1);
        return res;
    }
    
    class Node{
        int val;
        int freq;
        int idx;
        Node()
        {}
        Node(int val,int freq,int idx)
        {
            this.val = val;
            this.freq = freq;
            this.idx = idx;
            
        }

    }
}
Solution3 :(Same as soln2 ,otherway of implementing comparator as a seperate class)

class FreqStack {
    Map<Integer,Integer> count;
    PriorityQueue<Node> pq;
    int idx;
    public FreqStack() {
        count = new HashMap<>();
        pq = new PriorityQueue<>(new NodeComparator());
        idx=0;
    }
    
    public void push(int x) {
        int freq = count.getOrDefault(x,0);
        count.put(x,freq+1);
        pq.add(new Node(x,freq+1,++idx));
    }
    
    public int pop() {
        
        int res = pq.remove().val;
         count.put(res,count.get(res)-1);
        return res;
    }
    
    class Node{
        int val;
        int freq;
        int idx;
        Node()
        {}
        Node(int val,int freq,int idx)
        {
            this.val = val;
            this.freq = freq;
            this.idx = idx;
            
        }

    }
    
    class NodeComparator implements Comparator<Node>{
        public int compare(Node n1,Node n2){
            return n1.freq==n2.freq?n2.idx-n1.idx:n2.freq-n1.freq;
        }
    }
}
