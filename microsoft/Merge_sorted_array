https://leetcode.com/explore/interview/card/microsoft/47/sorting-and-searching/258/

Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
Note:
The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2.

Solution1 :

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
        if(n == 0)
            return;
        int i=m-1,j=n-1,k=m+n-1;
        while(i >= 0 && j >=  0)
        {
            if(nums1[i] > nums2[j])
                nums1[k--] = nums1[i--];
            else
                nums1[k--] = nums2[j--];
        }
        while( j >= 0)
            nums1[k--] = nums2[j--];
    }
}

Time Complexity : O(m+n) ,Space: O(1)

Solution2:
Time Complexity : O(m+n) ,Space: O(m)
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        if(n == 0)
            return;
        int[] nums3 = new int[m];
         int i=0,j=0,k=0;
        for(i=0;i<m;i++)
            nums3[i] = nums1[i];
        i=0;
        while(i<m && j < n)
        {
            if(nums3[i] < nums2[j])
                nums1[k++] = nums3[i++];
            else
                nums1[k++] = nums2[j++];
        }
        while(i<m)
            nums1[k++] = nums3[i++];
        while(j<n)
            nums1[k++] = nums2[j++];

        
    }
}

