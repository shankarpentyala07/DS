https://leetcode.com/problems/set-matrix-zeroes/solution/
Solution1:
Time:O(m*n) ,Space O(m+n)
class Solution {
    public void setZeroes(int[][] matrix) {
        
        Set<Integer> row = new HashSet<>();
        Set<Integer> col = new HashSet<>();
        
        if(matrix == null || matrix.length == 0)
            return;
        int nr = matrix.length,nc = matrix[0].length;
        
        for(int i=0;i<nr;i++)
        {
         for(int j=0;j<nc;j++)
          {
            if(matrix[i][j] == 0) 
            {
                 row.add(i);
                 col.add(j);
            }
          }
         }
        
        for(int i=0;i<nr;i++)
        {
         for(int j=0;j<nc;j++)
          {
            if(row.contains(i) || col.contains(j)) 
                matrix[i][j] =0;
          }
         }   
    }
}

Solution2: 
Time : O(m*n) space: O(1)

class Solution {
  public void setZeroes(int[][] matrix) {
    Boolean isCol = false;
    int R = matrix.length;
    int C = matrix[0].length;

    for (int i = 0; i < R; i++) {

      // Since first cell for both first row and first column is the same i.e. matrix[0][0]
      // We can use an additional variable for either the first row/column.
      // For this solution we are using an additional variable for the first column
      // and using matrix[0][0] for the first row.
      if (matrix[i][0] == 0) {
        isCol = true;
      }

      for (int j = 1; j < C; j++) {
        // If an element is zero, we set the first element of the corresponding row and column to 0
        if (matrix[i][j] == 0) {
          matrix[0][j] = 0;
          matrix[i][0] = 0;
        }
      }
    }

    // Iterate over the array once again and using the first row and first column, update the elements.
    for (int i = 1; i < R; i++) {
      for (int j = 1; j < C; j++) {
        if (matrix[i][0] == 0 || matrix[0][j] == 0) {
          matrix[i][j] = 0;
        }
      }
    }

    // See if the first row needs to be set to zero as well
    if (matrix[0][0] == 0) {
      for (int j = 0; j < C; j++) {
        matrix[0][j] = 0;
      }
    }

    // See if the first column needs to be set to zero as well
    if (isCol) {
      for (int i = 0; i < R; i++) {
        matrix[i][0] = 0;
      }
    }
  }
}
Approach 3 is definitely brilliant. The brilliance of the method is in its separation of marker zero and real zero. 
By placing the marker zeros in the first row and first column, there are two benefits. First, there is no confusion
whether a zero is real or marker in the main chunk of the matrix. Second, confusion of marker zero and real zero in the 
first row and column can be resolved by additional markers with constant space.

The same approach as 2nd one in a more clear code:
public class Solution {
public void setZeroes(int[][] matrix) {
    boolean fr = false,fc = false;
    for(int i = 0; i < matrix.length; i++) {
        for(int j = 0; j < matrix[0].length; j++) {
            if(matrix[i][j] == 0) {
                if(i == 0) fr = true;
                if(j == 0) fc = true;
                matrix[0][j] = 0;
                matrix[i][0] = 0;
            }
        }
    }
    for(int i = 1; i < matrix.length; i++) {
        for(int j = 1; j < matrix[0].length; j++) {
            if(matrix[i][0] == 0 || matrix[0][j] == 0) {
                matrix[i][j] = 0;
            }
        }
    }
    if(fr) {
        for(int j = 0; j < matrix[0].length; j++) {
            matrix[0][j] = 0;
        }
    }
    if(fc) {
        for(int i = 0; i < matrix.length; i++) {
            matrix[i][0] = 0;
        }
    }
    
}
}


Solution4: Same logic but shoter code:

void setZeroes(vector<vector<int> > &matrix) {
    int col0 = 1, rows = matrix.size(), cols = matrix[0].size();

    for (int i = 0; i < rows; i++) {
        if (matrix[i][0] == 0) col0 = 0;
        for (int j = 1; j < cols; j++)
            if (matrix[i][j] == 0)
                matrix[i][0] = matrix[0][j] = 0;
    }

    for (int i = rows - 1; i >= 0; i--) {
        for (int j = cols - 1; j >= 1; j--)
            if (matrix[i][0] == 0 || matrix[0][j] == 0)
                matrix[i][j] = 0;
        if (col0 == 0) matrix[i][0] = 0;
    }
}

Key point: Manipulate the first row at the end as it is the key to other elements in the array.
If you manipulate the first row at the first,then it would lead to a wrong solution as it effects manipulating other elements 
