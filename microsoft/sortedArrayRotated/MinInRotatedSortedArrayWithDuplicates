
https://leetcode.com/explore/interview/card/microsoft/47/sorting-and-searching/207/

class Solution {
    public int findMin(int[] nums) {
        
        if(nums.length == 1)
            return nums[0];
        int start = 0,end = nums.length-1;
        
        while(start < end)
        {
            int mid = start + (end-start)/2;
            if (nums[mid]  > nums[end])
                start = mid+1;
            else if (nums[mid] < nums[end])
                end = mid;
            else
                end--;
                
        }
        return nums[start];
    }
}

Time Complexity : O(n) -> worstcase
Space Complexity: O(1)


Solution2:
class Solution {
    public int findMin(int[] nums) {
        
        /**
        
        
        **/
        int start = 0,end = nums.length-1;
        
        while(start < end)
        {
            int mid = start + (end-start)/2;
            if(nums[start] < nums[end])
                return nums[start];
            else if(nums[start] == nums[mid] && nums[mid] == nums[end])
                end = end-1;
            else if(nums[start] <= nums[mid])
                start = mid+1;
            else
                end = mid;
        }
        
        return nums[start];
    }
}
