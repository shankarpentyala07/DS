https://leetcode.com/explore/interview/card/microsoft/31/trees-and-graphs/192/

Solution1 (Queue) :

class Solution {
    public Node connect(Node root) {
        
        if(root == null)
            return root;
        Queue<Node> outer = new LinkedList<>();
        outer.add(root);
        while(!outer.isEmpty())
        {
            int size = outer.size();
            while(size-- > 0){
            Node curr = outer.remove();
            if(size > 0)   
              curr.next = outer.peek();
            if(curr.left != null)
                outer.add(curr.left);
            if(curr.right != null)
                outer.add(curr.right);
            }
        }
        return root;
        
    }
}

Solution2: (Space o(1) solution)

class Solution {
    public Node connect(Node root) {
        if(root == null)
            return root;
        Node currHead = root;
        while(currHead != null && currHead.left != null)
        {
            Node curr = currHead;
            while( curr != null)
            {
                curr.left.next = curr.right;
                curr.right.next = curr.next != null ? curr.next.left: null;
                curr = curr.next;
            }
            currHead = currHead.left;
        }
        
        return root;
        
    }
} 
