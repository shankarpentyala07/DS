https://leetcode.com/problems/climbing-stairs/

DP Problem:

Solution1:(Recursion With Memoization)

class Solution {
    Map<Integer,Integer> seen = new HashMap<>();
    public int climbStairs(int n) {
        
        if(n == 0)
            return 1;
        if(n < 0)
            return 0;
        if(seen.containsKey(n))
            return seen.get(n);
        int count =climbStairs(n-1) + climbStairs(n-2);
        seen.put(n,count);
        return count;
        
    }
}

2.
public class Solution {
    public int climbStairs(int n) {
        if (n == 1) {
            return 1;
        }
        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
}
3.
public int climbStairs(int n) {
    // base cases
    if(n <= 0) return 0;
    if(n == 1) return 1;
    if(n == 2) return 2;
    
    int one_step_before = 2;
    int two_steps_before = 1;
    int all_ways = 0;
    
    for(int i=2; i<n; i++){
    	all_ways = one_step_before + two_steps_before;
    	two_steps_before = one_step_before;
        one_step_before = all_ways;
    }
    return all_ways;
}
