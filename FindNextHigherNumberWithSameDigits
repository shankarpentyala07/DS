

public class Solution {
    public int nextGreaterElement(int n) {
        char[] a = ("" + n).toCharArray();
        int i = a.length - 2;
        while (i >= 0 && a[i + 1] <= a[i]) {
            i--;
        }
        if (i < 0)
            return -1;
        int j = a.length - 1;
        while (j >= 0 && a[j] <= a[i]) {
            j--;
        }
        swap(a, i, j);
        reverse(a, i + 1);
        try {
            return Integer.parseInt(new String(a));
        } catch (Exception e) {
            return -1;
        }
    }
    private void reverse(char[] a, int start) {
        int i = start, j = a.length - 1;
        while (i < j) {
            swap(a, i, j);
            i++;
            j--;
        }
    }
    private void swap(char[] a, int i, int j) {
        char temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
}


/************************/

MY solution Same approach In a detailed manner:
class Solution {
    public int nextGreaterElement(int n) {
        
        String s = String.valueOf(n);
        char ch[] =s.toCharArray();
        for(int i = s.length()-1;i>0;i--)
        {
            if(ch[i-1] < ch[i])
            {
                int mindiff = Integer.MAX_VALUE,mindiffindex=-1;
                int j = i;
                while(j< s.length())
                {
                    if(ch[j] > ch[i-1] && mindiff >= (ch[j]-ch[i-1]))
                    {
                    mindiff= ch[j]-ch[i-1];
                    mindiffindex = j;
                    }
                    j++;
                }
                
                char tmp = ch[i-1];
                ch[i-1] = ch[mindiffindex];
                ch[mindiffindex] = tmp;
                
                int l = i,r=s.length()-1;
                
                while(l<r)
                {
                tmp = ch[l];
                ch[l] = ch[r];
                ch[r] = tmp;
                    l++;
                    r--;
                }
                try
                {
                Integer.parseInt(String.valueOf(ch));
                }
                catch(Exception e){
                    return -1;}
                return Integer.parseInt(String.valueOf(ch));
            }
                
        }
        return -1;
        
    }
}
