class Solution {
    public int numIslands(char[][] grid) {
        if(grid.length == 0)
            return 0;
        int count = 0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j] == '1')
                {
                    count++;
                    dfs(grid,i,j);
                }
            }
        }
        
     
        
        return count;
        
    }
    
    public void dfs(char[][] grid,int i,int j)
    {
        if((i >=0 && i < grid.length) && (j>=0 && j<grid[0].length) && grid[i][j] == '1')
            grid[i][j] = '0';
        else
           return;
        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
        dfs(grid,i,j+1);
        dfs(grid,i,j-1);
    }
}

Sol2: Without Modifying Input Array:Use a visited boolean array to keep note of the visited elements,solution without modifying original Array
class Solution {
    public int numIslands(char[][] grid) {
        
        if( grid == null || grid.length == 0)
            return 0;
        int nr = grid.length;
        int nc = grid[0].length;
        boolean visited[][] = new boolean[nr][nc];
        int count = 0;
        for(int i=0;i<nr;i++)
        {
            for(int j=0;j<nc;j++)
            {
                if(grid[i][j] == '1' && !visited[i][j])
                {
                    //visited[i][j] = true;
                    count++;
                    dfs(grid,visited,i,j,nr,nc);
                }
            }
        }
        return count;
        
    }
    
    
    public void dfs(char[][] grid,boolean visited[][],int i,int j,int nr,int nc)
    {
        if(i<0 || i>=nr || j<0 || j>=nc || visited[i][j]  || grid[i][j] == '0')
            return;
        visited[i][j] = true;
        dfs(grid,visited,i+1,j,nr,nc);
        dfs(grid,visited,i-1,j,nr,nc);
        dfs(grid,visited,i,j+1,nr,nc);
        dfs(grid,visited,i,j-1,nr,nc);
    }
}
