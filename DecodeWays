https://leetcode.com/problems/decode-ways/
class Solution {
    
    HashMap<Integer,Integer> memo = new HashMap<>();
    
    public int helper(String s,int index)
    {
        // If you reach the end of the string
        // Return 1 for success.
        if(index == s.length())
            return 1;
        
        // If the string starts with a zero, it can't be decoded
        if(s.charAt(index) == '0')
            return 0; 
        // Memoization is needed since we might encounter the same sub-string.
        if(memo.containsKey(index))
            return memo.get(index);
          
        int count = helper(s,index+1);
        
        if(index < s.length()-1 && Integer.parseInt(s.substring(index,index+2)) <= 26)
            count += helper(s,index+2);
        
        //Save for memoization
        memo.put(index,count);
        
        return count;
        
    }
    public int numDecodings(String s) {
        if (s == null || s.length() == 0)
            return 0;
        return helper(s,0);
         
    }
}
Time: O(N)

Solution2: (DP Approach)
class Solution {
    public int numDecodings(String s) {
        int dp[] = new int[s.length()+1];
        dp[0] = 1;
        dp[1] = s.charAt(0) == '0' ? 0:1;
        for(int i=2;i<=s.length();i++){
            int first = Integer.parseInt(s.substring(i-1,i));
            int second = Integer.parseInt(s.substring(i-2,i));
            if(first > 0 && first<=9){
                dp[i] += dp[i-1];
            }
            
            if(second >=10 && second<=26){
                dp[i] += dp[i-2];
            }
        }
        return dp[s.length()];
    }
}

Solution3: DP without any space

class Solution {
    public int numDecodings(String s) {
        
        if(s == null || s.length() == 0)
            return 0;
        
        if(s.charAt(0) == '0')
            return 0;
        
        int len = s.length();
       // int[] dp = new int[len+1];
        int Twostep=1;
         int Onestep =1;
        for(int i=1;i<len;i++)
        {
            int curr=0;
            if(s.charAt(i) != '0')
                curr += Onestep;
            if(Integer.parseInt(s.substring(i-1,i+1)) >= 10 && Integer.parseInt(s.substring(i-1,i+1)) <= 26)
                curr += Twostep;
            
            Twostep = Onestep;
            Onestep = curr;
        }
        
        return Onestep;
    }
}
