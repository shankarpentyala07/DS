https://leetcode.com/problems/decode-ways/
class Solution {
    
    HashMap<Integer,Integer> memo = new HashMap<>();
    
    public int helper(String s,int index)
    {
        // If you reach the end of the string
        // Return 1 for success.
        if(index == s.length())
            return 1;
        
        // If the string starts with a zero, it can't be decoded
        if(s.charAt(index) == '0')
            return 0; 
        // Memoization is needed since we might encounter the same sub-string.
        if(memo.containsKey(index))
            return memo.get(index);
          
        int count = helper(s,index+1);
        
        if(index < s.length()-1 && Integer.parseInt(s.substring(index,index+2)) <= 26)
            count += helper(s,index+2);
        
        //Save for memoization
        memo.put(index,count);
        
        return count;
        
    }
    public int numDecodings(String s) {
        if (s == null || s.length() == 0)
            return 0;
        return helper(s,0);
        
    }
}
Time: O(N)
