Given a list of items in groups, perform certain operations in order to satisfy the constaints required by packaging automation.
The conditions are as follows:

The first group must contain 1 item only.
For all the other groups, the difference between the number of items in adjacent groups must be greater than 1. In other words, for 1 <= i <= n, arr[i] - arr[i - 1] <= 1. To accomplish this, the following operations are available:
Rearrange the groups in any way.
Reduce any group to any number that is >= 1.
Write an algorithm to find the maximum items that can be packaged for the final group of the list given the conditions above.

Example - 1 -- arr = [3, 1, 3, 4]. Output: 4. Explanation: Subtract 1 from the first group making the list [2, 1, 3, 4]. Rearrange the list into [1, 2, 3, 4]. The final maximum of items that can be packaged in the last group is 4.

Example 2 - arr = [1, 1, 1, 1]. Output is 1.

My approach to this problem:
1.) First sort the initial array and keep the max element at the last(A greedy way to maximize the ans).(Note: the ans cannot be more than the max element . So we keep it there initially)
2.)One by one process each element.We can use a stack or separate list to track the resultant array . For the first element, make sure it is always 1 as specified in the pblm statement. If the given array doesn't contain 1, reduce the first element in the sorted array to 1.
3.)Then for the remaining elements just compare the diff of it with the previous element in the new resultant array so that if the difference is greater than 1 just replace the element with prevElement of resultant array+1 . Now the difference will be the 1 which is the max we can attain as per pblm statement. If the difference is <=1 already ..no need to do anything..Go for the next one.
4.)Finally print the lastElement in resultant array as the answer.
Hope this works for all the test cases..I guess.
