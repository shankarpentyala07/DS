Prime AirRoutes
import java.util.*; 

public class Main
{
  public static void main(String[] args)
  {
    List<List<Integer>> forwardList = new LinkedList<List<Integer>>();
    forwardList.add(new ArrayList<Integer>(Arrays.asList(1, 2000)));
    forwardList.add(new ArrayList<Integer>(Arrays.asList(2, 4000)));
    forwardList.add(new ArrayList<Integer>(Arrays.asList(3, 6000)));
    forwardList.add(new ArrayList<Integer>(Arrays.asList(4, 5000)));
    
    List<List<Integer>> returnList = new LinkedList<List<Integer>>();
    returnList.add(new ArrayList<Integer>(Arrays.asList(1, 2000)));
    returnList.add(new ArrayList<Integer>(Arrays.asList(2, 1000)));
    
    System.out.println(calculateOptimalRoute(7000, forwardList, returnList));
  }
  
  public static List<List<Integer>> calculateOptimalRoute(final int capacity, final List<List<Integer>> forwardList, final List<List<Integer>> returnList)
  {
  	System.out.println(forwardList);
    System.out.println(returnList);
    
    // sort forward list
    Collections.sort(forwardList, new Comparator<List<Integer>>()
    {
      @Override
      public int compare(List<Integer> o1, List<Integer> o2) {
      	return o1.get(1) - o2.get(1);  
      }
    });
    
    // sort return list
    Collections.sort(returnList, new Comparator<List<Integer>>() {
      public int compare(List<Integer> o1, List<Integer> o2) {
      	return o1.get(1) - o2.get(1);
      }
    });
    
    int max = 0;
    int i = 0;
    int j = returnList.size() - 1;
    
    List<List<Integer>> result = new ArrayList<List<Integer>>();
    while(i < forwardList.size() && j >= 0)
    {
        int temp_forward=forwardList.get(i).get(1);
        int temp_backward=returnList.get(j).get(1);
        int sum=temp_forward+temp_backward;
        if(sum>max && sum<=capacity)
      
        {   
            
            max=sum;
      	    result = new ArrayList<List<Integer>>();
            result.add(new ArrayList<Integer>(Arrays.asList(forwardList.get(i).get(0),returnList.get(j).get(0))));
            i++;
        }
        else if(sum==max)
        
        {
      	    result.add(new ArrayList<Integer>(Arrays.asList(forwardList.get(i).get(0), returnList.get(j).get(0))));
            i++;
        }
        else 
        {
        	j--;
        }
    }
    if(!result.isEmpty())
        return result;
    else
        {
            result=new ArrayList<List<Integer>>();
            result.add(new ArrayList<>());
            
            
            return result;
        }
        
  }	
}
Amazon Fulfilment (Minimum cost to connect sticks)
class Solution {
    public int connectSticks(int[] sticks) {
        int total_cost=0;
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        for(int s:sticks)
            pq.add(s);
        while(pq.size()>1)
        {
            int stick1=pq.remove();
            int stick2=pq.remove();
            
            int cost=stick1+stick2;
            total_cost+=cost;
            pq.add(stick1+stick2);
        }
       return total_cost; 
    }
}
Amazon Fresh
 public static int prizeCheck (String[][] codeList, String[] shoppingCart) {
        
        String SshoppingCart = String.join("", shoppingCart);
        
        int len = codeList.length;
        String[] ScodeList = new String[len];
        
        for (int i = 0; i < len; i++) {
            ScodeList[i] = String.join("", codeList[i]);
            
            //replace "anything" with regex wildcard for [at least 1 alphabet]
            ScodeList[i] = ScodeList[i].replace ("anything", "[a-zA-Z]+");
            
            //now try to find first occurrence of the regex version of the input code in shopping cart
            // and replace with "REMOVEUPTO" if found, for removal later
            String removePlaceholder = "REMOVEUPTO";
            SshoppingCart = SshoppingCart.replaceFirst (ScodeList[i], removePlaceholder);
            
            // if string found, remove the string AND everything before if from shoppingCart string, then pass to next code
            int indexOfStringBegin = SshoppingCart.indexOf(removePlaceholder);
            if (indexOfStringBegin >= 0) {
                SshoppingCart = SshoppingCart.substring(indexOfStringBegin+removePlaceholder.length(), SshoppingCart.length());
            }
            else {
                // code was not found
                return 0;
            }
        }
        
        // if all codes were found, then it is a winner
        return 1;
    }
Amazon Music Pairs
class Solution {
    public int numPairsDivisibleBy60(int[] time) {
        int reminders[] = new int[60];
        int count = 0;
        for (int t: time) {
            if (t % 60 == 0) { // check if a%60==0 && b%60==0
                count += reminders[0];
            } else { // check if a%60+b%60==60
                count += reminders[60 - t % 60];
            }
            reminders[t % 60]++; // reminder to update the reminders
        }
        return count;
    }
}
Items in Containers
import java.util.*;
import java.io.*;

/**
 * Created on:  Jan 15, 2021
 * Questions: https://aonecode.com/amazon-online-assessment-items-in-containers
 */

public class ItemsInContainers {

    public static void main(String[] args) {
        System.out.println(Arrays.toString(numberOfItems("*|*|", new int[]{1}, new int[]{3})));
        System.out.println(Arrays.toString(numberOfItems("*|*|*|", new int[]{1}, new int[]{6})));
    }

    private static int[] numberOfItems(String str, int[] starts, int[] ends) {
        int len = str.length();
        int[] result = new int[starts.length], left = new int[len], right = new int[len];
//        Left array will have the index of close\open located on the left side.
//        Right array will have the index of close\open located on the right side.
        int closeIdx = Integer.MAX_VALUE;
        for (int i = len - 1; i >= 0; i--) {
            if (str.charAt(i) == '|') closeIdx = i;
            right[i] = closeIdx;
        }
        closeIdx = Integer.MAX_VALUE;
        for (int i = 0; i < len; i++) {
            if (str.charAt(i) == '|') closeIdx = i;
            left[i] = closeIdx;
        }
        for (int i = 0; i < starts.length; i++) {
            int start = starts[i], end = ends[i];
            int startIdx = right[start - 1], endIdx = left[end - 1];
            result[i] = getCount(startIdx, endIdx, str);
        }
        return result;
    }

    private static int getCount(int startIdx, int endIdx, String str) {
        if (startIdx == Integer.MAX_VALUE || endIdx == Integer.MAX_VALUE || startIdx >= endIdx) return 0;
        int count = 0;
        for (int i = startIdx + 1; i < endIdx; i++) {
            count += str.charAt(i) == '*' ? 1 : 0;
        }
        return count;
    }
}
Largest Item Association:
import java.util.*;
import java.io.*;

/**
 * Created on:  Jan 15, 2021
 * Questions: https://leetcode.com/discuss/interview-question/844979/amazon-online-assessment-question
 */

public class LargestItemAssociation {

    public static void main(String[] args) {
        System.out.println(largestItemAssociation(Arrays.asList(
                new PairString("Item1", "Item2"),
                new PairString("Item3", "Item4"),
                new PairString("Item4", "Item5")
        )));

        System.out.println(largestItemAssociation(Arrays.asList(
                new PairString("Item1", "Item2"),
                new PairString("Item2", "Item8"),
                new PairString("Item2", "Item10"),
                new PairString("Item10", "Item12"),
                new PairString("Item10", "Item4"),
                new PairString("Item10", "Item3"),
                new PairString("Item3", "Item4"),
                new PairString("Item4", "Item5")
        )));
    }

    static List<String> largestItemAssociation(List<PairString> itemAssociation) {
        LinkedHashMap<String, LinkedHashSet<String>> map = new LinkedHashMap<>();
        for (PairString pairs : itemAssociation) {
            if (pairs.first.equals(pairs.second)) continue;
            map.computeIfAbsent(pairs.first, val -> new LinkedHashSet<>()).add(pairs.second);
            map.computeIfAbsent(pairs.second, val -> new LinkedHashSet<>()).add(pairs.first);
        }
        List<String> result = new ArrayList<>();
        for (String name : map.keySet()) {
            Set<String> visited = new HashSet<>();
            List<String> cur = dfs(name, map, visited);
            if (cur.size() > result.size()) {
                result = cur;
            }
        }
        return result;
    }

    private static List<String> dfs(String name, Map<String, LinkedHashSet<String>> map, Set<String> visited) {
        if (!visited.add(name)) return new ArrayList<>();
        List<String> cur = new ArrayList<>();
        for (String dep : map.get(name)) {
            List<String> next = dfs(dep, map, visited);
            if (next.size() > cur.size()) {
                cur = next;
            }
        }
        visited.remove(name);
        cur.add(0, name);
        return cur;
    }
}

class PairString {
    String first;
    String second;

    PairString(String first, String second) {
        this.first = first;
        this.second = second;
    }
}
