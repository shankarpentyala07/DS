Given a set of numbers that might contain duplicates, find all of its distinct subsets.
Example 1:
Input: [1, 3, 3]
Output: [], [1], [3], [1,3], [3,3], [1,3,3]

This problem follows the Subsets pattern and we can follow a similar Breadth First Search (BFS) approach. The only additional thing
we need to do is handle duplicates. Since the given set can have duplicate numbers, if we follow the same approach discussed in Subsets, 
we will end up with duplicate subsets, which is not acceptable. To handle this, we will do two extra things:

Sort all numbers of the given set. This will ensure that all duplicate numbers are next to each other.
Follow the same BFS approach but whenever we are about to process a duplicate (i.e., when the current and the previous numbers are same),
instead of adding the current number (which is a duplicate) to all the existing subsets, only add it to the subsets which were created in the previous step

import java.util.*;

class SubsetWithDuplicates {

  public static List<List<Integer>> findSubsets(int[] nums) {
    List<List<Integer>> subsets = new ArrayList<>();
    // TODO: Write your code here   
    Arrays.sort(nums);
    subsets.add(new ArrayList<>());
    int endIdx = 0;
    for(int i=0;i<nums.length;i++)
    {
      int startIdx = 0;
      if(i > 0 && nums[i-1] ==nums[i])
          startIdx = endIdx;
      endIdx = subsets.size();
      for(int j=startIdx;j<endIdx;j++)
      {
        List<Integer> subset =new ArrayList<>(subsets.get(j));
        subset.add(nums[i]);
        subsets.add(subset);
      }
    }
    return subsets;
  }

  public static void main(String[] args) {
    List<List<Integer>> result = SubsetWithDuplicates.findSubsets(new int[] { 1, 3, 3 });
    System.out.println("Here is the list of subsets: " + result);

    result = SubsetWithDuplicates.findSubsets(new int[] { 1, 5, 3, 3 });
    System.out.println("Here is the list of subsets: " + result);
  }
}
