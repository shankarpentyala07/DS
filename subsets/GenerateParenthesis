

Sol1:
class Solution {
    
    public boolean valid(char[] comb)
    {
        int balance = 0;
        for(char ch : comb)
        {
            if(ch == '(')
                balance++;
            else
                balance--;
            if(balance < 0)
                return false;
        }
        return balance == 0;
    }
    public void generateParenthesis(char[] comb,int pos,List<String> res)
    {
        if(pos == comb.length)
        {
            if (valid(comb))
                res.add(String.valueOf(comb));
        }
        else
        {
            comb[pos] = '(';
            generateParenthesis(comb,pos+1,res);
            comb[pos] = ')';
            generateParenthesis(comb,pos+1,res);        
        }
        
    }
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        generateParenthesis(new char[2*n],0,res);
        return res;
    }
}

Time: O(2^2n)
Space: O(n)

Sol2: (Removing Valid function)
class Solution {
    

    public void generateParenthesis(char[] comb,int pos,int open,int close,List<String> res)
    {
        if(pos == comb.length)
        {
                res.add(String.valueOf(comb));
        }
        else
        {
            if(open < comb.length/2)
            {
            comb[pos] = '(';
            generateParenthesis(comb,pos+1,open+1,close,res);
            }
            if(close < open)
            {
            comb[pos] = ')';
            generateParenthesis(comb,pos+1,open,close+1,res);  
            }
        }
        
    }
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        generateParenthesis(new char[2*n],0,0,0,res);
        return res;
    }
}

Sol3: (Same as 2 ,using StringBuilder)
class Solution {
    

    public void generateParenthesis(StringBuilder sb,int pos,int open,int close,List<String> res,int n)
    {
        if(pos == 2*n)
                res.add(sb.toString());
        else
        {
            if(open < n)
            {
            sb.append('(');
            generateParenthesis(sb,pos+1,open+1,close,res,n);
            sb.setLength(sb.length()-1);
                
            }
            if(close < open)
            {
            sb.append(')');
            generateParenthesis(sb,pos+1,open,close+1,res,n); 
            sb.setLength(sb.length()-1);
            }
        }
        
    }
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        generateParenthesis(new StringBuilder(),0,0,0,res,n);
        return res;
    }
}

Sol3:(Binary Searc Sol)
import java.util.*;

class ParenthesesString {
  String str;
  int openCount; // open parentheses count
  int closeCount; // close parentheses count

  public ParenthesesString(String s, int openCount, int closeCount) {
    str = s;
    this.openCount = openCount;
    this.closeCount = closeCount;
  }
}

class GenerateParentheses {

  public static List<String> generateValidParentheses(int num) {
    List<String> result = new ArrayList<String>();
    Queue<ParenthesesString> queue = new LinkedList<>();
    queue.add(new ParenthesesString("", 0, 0));
    while (!queue.isEmpty()) {
      ParenthesesString ps = queue.poll();
      // if we've reached the maximum number of open and close parentheses, add to the result
      if (ps.openCount == num && ps.closeCount == num) {
        result.add(ps.str);
      } else {
        if (ps.openCount < num) // if we can add an open parentheses, add it
          queue.add(new ParenthesesString(ps.str + "(", ps.openCount + 1, ps.closeCount));

        if (ps.openCount > ps.closeCount) // if we can add a close parentheses, add it
          queue.add(new ParenthesesString(ps.str + ")", ps.openCount, ps.closeCount + 1));
      }
    }
    return result;
  }

  public static void main(String[] args) {
    List<String> result = GenerateParentheses.generateValidParentheses(2);
    System.out.println("All combinations of balanced parentheses are: " + result);

    result = GenerateParentheses.generateValidParentheses(3);
    System.out.println("All combinations of balanced parentheses are: " + result);
  }
}
