https://leetcode.com/problems/letter-combinations-of-a-phone-number/
Sol1: (BFS Approach)
class Solution {
    public List<String> letterCombinations(String digits) {
    
        List<String> res = new ArrayList<>();
        if(digits == null || digits.length() == 0)
            return res;
        HashMap<Character,char[]> map = new HashMap<>();
        map.put('2',new char[]{'a','b','c'});
        map.put('3',new char[]{'d','e','f'});
        map.put('4',new char[]{'g','h','i'});
        map.put('5',new char[]{'j','k','l'});
        map.put('6',new char[]{'m','n','o'});
        map.put('7',new char[]{'p','q','r','s'});
        map.put('8',new char[]{'t','u','v'});
        map.put('9',new char[]{'w','x','y','z'});
        int len = digits.length();
        char ch[] = digits.toCharArray();
        Queue<String> queue = new LinkedList<>();
        queue.add("");
        
        for(char digit : ch)
        {
            int size = queue.size();
            while(size-- > 0)
            {
                for(char comb : map.get(digit))
                {
                    StringBuilder sb = new StringBuilder(queue.peek());
                    sb.append(comb);
                    if(sb.length() == len)
                        res.add(String.valueOf(sb));
                    else
                    queue.add(sb.toString());
                }
                queue.poll();
            }
        }
        return res;
        
    }
}

Sol2: (BackTracking Approach)
class Solution {
    public void letterCombinations(char[] ch,HashMap<Character,char[]> map,StringBuilder sb,List<String> res,int pos)
    {
     
        if(sb.length() == ch.length)
            res.add(sb.toString());
        else
        {
            for(char digit : map.get(ch[pos]))
            {
                sb.append(digit);
                letterCombinations(ch,map,sb,res,pos+1);
                sb.setLength(sb.length()-1);
            }
        }
    }
    public List<String> letterCombinations(String digits) {
    
        List<String> res = new ArrayList<>();
        if(digits == null || digits.length() == 0)
            return res;
        HashMap<Character,char[]> map = new HashMap<>();
        map.put('2',new char[]{'a','b','c'});
        map.put('3',new char[]{'d','e','f'});
        map.put('4',new char[]{'g','h','i'});
        map.put('5',new char[]{'j','k','l'});
        map.put('6',new char[]{'m','n','o'});
        map.put('7',new char[]{'p','q','r','s'});
        map.put('8',new char[]{'t','u','v'});
        map.put('9',new char[]{'w','x','y','z'});
        int len = digits.length();
        char ch[] = digits.toCharArray();
        letterCombinations(ch,map,new StringBuilder(),res,0);
        return res;
        
    }
}
