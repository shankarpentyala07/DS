https://leetcode.com/problems/palindrome-removal/
class Solution {
    public int minimumMoves(int[] arr) {
        
        if(arr == null || arr.length < 1)
            return 0;
        
        if(arr.length == 1)
            return 1;
        int n = arr.length;
        int[][] dp = new int[n][n];
        //For length 1
        for(int i=0;i<n;i++)
            dp[i][i] = 1;
        
        //For length 2
        for(int i=0;i<n-1;i++)
        {
            dp[i][i+1] = 2;
            if(arr[i] == arr[i+1])
                dp[i][i+1] = 1;
        }
        
        //For length 3
        for(int len=3;len<=n;len++)
        {
            for(int left=0,right = left+len-1;right<n;left++,right++)
            {
                dp[left][right] = n;
                if(arr[left] == arr[right])
                    dp[left][right] = dp[left+1][right-1];
                
                for(int mid=left;mid<right;mid++)
                    dp[left][right] = Math.min(dp[left][right],dp[left][mid] + dp[mid+1][right]);
            }
        }
        
        return dp[0][n-1];
    }
}

Time: O(n^3)
Space: O(n^2)
Reference: https://leetcode.com/problems/palindrome-removal/discuss/424454/My-super-clean-DP-Java-solution
