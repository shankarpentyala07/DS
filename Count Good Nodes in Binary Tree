https://leetcode.com/problems/count-good-nodes-in-binary-tree/
Solution1:
class Solution {
    int count =0;
    public void goodNodes(TreeNode root,int max) {
        if(root == null)
            return;
        if(root.val >= max)
        {
            max = root.val;
            count++;
        }
        
        goodNodes(root.left,max);
        goodNodes(root.right,max);
    }
    
    public int goodNodes(TreeNode root) {      
        goodNodes(root,Integer.MIN_VALUE);
        return count;

    }
}

Solution2:
class Solution {
    //int count =0;
    public int goodNodes(TreeNode root,int max) {
        if(root == null)
            return 0;
        int count=0;
        if(root.val >= max)
        {
            max = root.val;
            count++;
        }

      return count + goodNodes(root.left,max) + goodNodes(root.right,max);
    }
    
    public int goodNodes(TreeNode root) {      
        return goodNodes(root,Integer.MIN_VALUE);
         

    }
}

class Solution {
    //int count =0;
    public int goodNodes(TreeNode root,int max) {
        if(root == null)
            return 0;
        int count=0;
        if(root.val >= max)
        {
            max = root.val;
            count++;
        }
        
      count +=  goodNodes(root.left,max);
      count += goodNodes(root.right,max);
      return count;
    }
    
    public int goodNodes(TreeNode root) {      
        return goodNodes(root,Integer.MIN_VALUE);
         

    }
}class Solution {
    //int count =0;
    public int goodNodes(TreeNode root,int max) {
        if(root == null)
            return 0;
        int count=0;
        if(root.val >= max)
        {
            max = root.val;
            count++;
        }
        
      count +=  goodNodes(root.left,max);
      count += goodNodes(root.right,max);
      return count;
    }
    
    public int goodNodes(TreeNode root) {      
        return goodNodes(root,Integer.MIN_VALUE);
         

    }
}class Solution {
    //int count =0;
    public int goodNodes(TreeNode root,int max) {
        if(root == null)
            return 0;
        int count=0;
        if(root.val >= max)
        {
            max = root.val;
            count++;
        }
        
      count +=  goodNodes(root.left,max);
      count += goodNodes(root.right,max);
      return count;
    }
    
    public int goodNodes(TreeNode root) {      
        return goodNodes(root,Integer.MIN_VALUE);
         

    }
}
