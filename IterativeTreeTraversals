PreOrder Traversal:

public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();      
        if(root == null)
            return res;       
        Stack<TreeNode> stack = new Stack<>();
        stack.add(root);        
        while(!stack.isEmpty())
        {
            TreeNode curr = stack.pop();
            res.add(curr.val);
            
            if(curr.right != null)
                stack.add(curr.right);
            
            if(curr.left != null)
                stack.add(curr.left);
        }
        return res;
    }

PostOrder Traversal:
1.
public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null)
            return res;
        Stack<TreeNode> stack = new Stack<>();
        while(root != null || !stack.isEmpty())
        {
            if(root != null)
            {
                stack.add(root);
                root = root.left;
            }
            else
            {
              TreeNode tmp =  stack.peek().right;
                if(tmp == null)
                {
                    tmp = stack.pop();
                    res.add(tmp.val);
                    while(!stack.isEmpty() && stack.peek().right == tmp)
                    {
                        tmp = stack.pop();
                        res.add(tmp.val);
                    }
                }
                else
                    root = tmp;   
            }
        }
        return res;
    }

2.


InOrder Traversal:
