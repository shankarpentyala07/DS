https://leetcode.com/problems/longest-repeating-character-replacement/submissions/

class Solution {
    public int characterReplacement(String str, int k) {
        
    Map<Character,Integer> freqMap = new HashMap<>();
    int wStart = 0,len = str.length(),maxfreq=0;
    int maxlen=0;
    for(int wEnd=0;wEnd < len;wEnd++)
    {
      char ch = str.charAt(wEnd);
      freqMap.put(ch,freqMap.getOrDefault(ch,0)+1);
      maxfreq = Math.max(maxfreq,freqMap.get(ch));
      if(wEnd-wStart+1-maxfreq > k)
      {
        int val = freqMap.get(str.charAt(wStart));
        freqMap.put(str.charAt(wStart),val-1);
        wStart++;
      }
      maxlen = Math.max(maxlen,wEnd-wStart+1);

    }
    return maxlen;
    }
}

sol2:
class Solution {
    public int characterReplacement(String s, int k) {
        
       int len = s.length();
        int[] count = new int[26];
        int start = 0, maxCount = 0, maxLength = 0;
        for (int end = 0; end < len; end++) {
            maxCount = Math.max(maxCount, ++count[s.charAt(end) - 'A']);
            if (end - start + 1 - maxCount > k) {
                count[s.charAt(start) - 'A']--;
                start++;
            }
            maxLength = Math.max(maxLength, end - start + 1);
        }
        return maxLength;
    }
}
