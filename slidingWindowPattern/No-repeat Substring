https://leetcode.com/problems/longest-substring-without-repeating-characters/

class Solution {
    public int lengthOfLongestSubstring(String str) {
    HashSet<Character> unique = new HashSet<>();
    //Sliding window
    int wStart=0,maxlen=0;
    char strA[] = str.toCharArray();
    for(int wEnd=0;wEnd<strA.length;wEnd++)
    {
      if(!unique.contains(strA[wEnd])){}
      else
        {
          while(strA[wStart] != strA[wEnd])
            unique.remove(strA[wStart++]);
          unique.remove(strA[wStart++]);
          
        }
        unique.add(strA[wEnd]);
        maxlen = Math.max(maxlen,wEnd-wStart+1);
    }

    return maxlen;
        
    }
}

Time : O(N)  ( Each element is visited twice in worst case)
Space: O(N)

Solution2:(Faster Compared to 1 )
class Solution {
    public int lengthOfLongestSubstring(String str) {
   int windowStart = 0, maxLength = 0;
    Map<Character, Integer> charIndexMap = new HashMap<>();
    // try to extend the range [windowStart, windowEnd]
    for (int windowEnd = 0; windowEnd < str.length(); windowEnd++) {
      char rightChar = str.charAt(windowEnd);
      // if the map already contains the 'rightChar', shrink the window from the beginning so that
      // we have only one occurrence of 'rightChar'
      if (charIndexMap.containsKey(rightChar)) {
        // this is tricky; in the current window, we will not have any 'rightChar' after its previous index
        // and if 'windowStart' is already ahead of the last index of 'rightChar', we'll keep 'windowStart'
        windowStart = Math.max(windowStart, charIndexMap.get(rightChar) + 1);
      }
      charIndexMap.put(rightChar, windowEnd); // insert the 'rightChar' into the map
      maxLength = Math.max(maxLength, windowEnd - windowStart + 1); // remember the maximum length so far
    }

    return maxLength;
        
    }
}

Solution3:(Same as 2 without comments)
class Solution {
    public int lengthOfLongestSubstring(String s) {
        //sliding window approach
        
        int len;
        if(s == null)
            return 0;
        if((len = s.length()) < 2)
            return len;
        
        Map<Character,Integer> hm = new HashMap<>();
        int wStart=0, maxlen=1;
        for(int wEnd=0;wEnd<len;wEnd++)
        {
            char ch = s.charAt(wEnd);
            if(hm.containsKey(ch))
                wStart = Math.max(wStart,hm.get(ch)+1);
            hm.put(ch,wEnd);
            maxlen = Math.max(maxlen,wEnd-wStart+1);
        }
        return maxlen;
        
    }
}
