class Solution {
  public int numIslands(char[][] grid) {
    if (grid == null || grid.length == 0) {
      return 0;
    }

    int nr = grid.length;
    int nc = grid[0].length;
    int num_islands = 0;

    for (int r = 0; r < nr; ++r) {
      for (int c = 0; c < nc; ++c) {
        if (grid[r][c] == '1') {
          ++num_islands;
          grid[r][c] = '0'; // mark as visited
          Queue<Integer> neighbors = new LinkedList<>();
          neighbors.add(r * nc + c);
          while (!neighbors.isEmpty()) {
            int id = neighbors.remove();
            int row = id / nc;
            int col = id % nc;
            if (row - 1 >= 0 && grid[row-1][col] == '1') {
              neighbors.add((row-1) * nc + col);
              grid[row-1][col] = '0';
            }
            if (row + 1 < nr && grid[row+1][col] == '1') {
              neighbors.add((row+1) * nc + col);
              grid[row+1][col] = '0';
            }
            if (col - 1 >= 0 && grid[row][col-1] == '1') {
              neighbors.add(row * nc + col-1);
              grid[row][col-1] = '0';
            }
            if (col + 1 < nc && grid[row][col+1] == '1') {
              neighbors.add(row * nc + col+1);
              grid[row][col+1] = '0';
            }
          }
        }
      }
    }

    return num_islands;
  }
}

Sol2: (Without Modifyng input array)
class Solution {
    
    public void numIslands(char[][] grid,Queue<Integer> queue,Set<Integer> visited,int nr,int nc)
    {
        int[][] directions = {{0,1},{0,-1},{1,0},{-1,0}};
        while(!queue.isEmpty())
        {
            int idx = queue.remove();
            int row = idx/ nc;
            int col = idx % nc;
           for(int[] d : directions)
            {
                int nRow = row + d[0];
                int nCol = col + d[1];
                
                if(nRow >= 0 && nRow < nr && nCol >=0 && nCol < nc && grid[nRow][nCol] == '1' && !visited.contains(nRow*nc+nCol)){
                   queue.add(nRow*nc+nCol);
                 visited.add(nRow*nc+nCol);
                }
            }
            
            
        }
    }
    
    
    public int numIslands(char[][] grid) {
        
        if(grid == null || grid.length == 0)
            return 0;
        
        int count = 0;
        
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        int nr=grid.length,nc=grid[0].length;
        
        for(int i=0;i < nr;i++)
        {
            for(int j=0;j<nc;j++)
            {
                if(grid[i][j] == '1' && !visited.contains(i*nc+j))
                {
                    count++;
                    queue.add(i*nc+j);
                    visited.add(i*nc+j);
                    numIslands(grid,queue,visited,nr,nc);
                }
            }
        }
        
        return count;
    }
}
