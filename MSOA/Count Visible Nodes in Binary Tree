https://leetcode.com/problems/count-good-nodes-in-binary-tree/
Solution1:

  public int goodNodes(TreeNode root,int max) {
        if(root == null)
            return 0;
        int count=0;
        if(root.val >= max)
        {
            max = root.val;
            count++;
        }

      return count + goodNodes(root.left,max) + goodNodes(root.right,max);
    }
    
    public int goodNodes(TreeNode root) {      
        return goodNodes(root,Integer.MIN_VALUE);
         

    }

Time : O(n)
Space: O(1)


Solution2:
class Solution {
    static int count = 0;
    public void preOrder(TreeNode root,Integer val)
    {
        if(root == null)
            return;
        if(root.val >= val)
            count++;
       // System.out.println(root.val);
        val = Math.max(val,root.val);
        preOrder(root.left,val);
        preOrder(root.right,val);
    }
    public int goodNodes(TreeNode root) {
        if(root == null)
            return 0;
        count = 0;
        preOrder(root,root.val);
        return count;
    }
}

Solution3:
class Solution {
    static int count = 0;
    public void preOrder(TreeNode root,Integer val)
    {
        if(root == null)
            return;
        if(root.val >= val)
            count++;
       // System.out.println(root.val);
        val = Math.max(val,root.val);
        preOrder(root.left,val);
        preOrder(root.right,val);
    }
    public int goodNodes(TreeNode root) {
        if(root == null)
            return 0;
        count = 0;
        preOrder(root,root.val);
        return count;
    }
}
