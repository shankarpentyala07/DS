	Give you one sorted array, please put them into n buckets, we need to ensure we get n sub array with approximately equal weights.
Example;
input {1, 2, 3, 4, 5} n = 3
output [[[5],[1,4],[2,3]];

Solution:
  
  public static List<List<Integer>> part(int[] T, int n) {
		List<List<Integer>> res = new ArrayList<>();
		int[] sum = new int[n];
		PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a,b) -> (sum[a.intValue()]-sum[b.intValue()]));
		for(int i=0;i<n;i++)
		{
			res.add(new ArrayList<Integer>());
			pq.add(i);
			
		}
		
		for(int i=T.length-1;i>=0;i--)
		{
			int currIdx = pq.poll();
			res.get(currIdx).add(T[i]);
			sum[currIdx]  += T[i];
			pq.add(currIdx);
		}
		return res;
	}

	
	public static void main(String[] args) {
		List<List<Integer>> result = part(new int[] {1,2,3,4,5}, 3);
		System.out.println(result);
	}

Time: O(nlog(k)) 
Space: O(n)
