Write a function that, given an array A of N integers, returns the lagest integer K > 0 such that both values K and -K exist in array A. If there is no such integer, the function should return 0.

Example 1:

Input: [3, 2, -2, 5, -3]
Output: 3
Example 2:

Input: [1, 2, 3, -4]
Output: 0

Solution1:
 public static void main(String[] s){
        int[] arr = {-41,3,2,5,41};
        System.out.println(largestNumWithNegPair(arr));
 }
 private static int largestNumWithNegPair(int[] arr){
        HashSet<Integer> set = new HashSet<>();
        int curMax = 0;
        for (int a:arr) {
            // if the negated counter part is already existing, consider the number for largestNum selection.
            if(set.contains(a*-1))
                curMax = Math.max(curMax,Math.abs(a));
            else
                //keep track of the numbers read so far.
                set.add(a);
        }
 return curMax;
 }

Time Cmoplexity : O(n)
Space Complexity: O(n)

Solution2:
private static int largestNum2(int[] nums) {
	int res = 0;
	Arrays.sort(nums);
	int l = 0, r = nums.length -1;
	while(l < r) {
		int sum = nums[l] + nums[r];
		if(sum == 0) {
			res = Math.max(res, Math.max(nums[l], nums[r]));
			l++;
			r--;
		}
		else if(sum < 0) {
			l++;
		}else {
			r--;
		}
	}
	return res;
}

Time Complexity : O(nlogn)
Space : O(1)
